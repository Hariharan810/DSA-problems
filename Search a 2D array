class Solution {
    public boolean searchMatrix(int[][] arr, int key) {
        int n = arr.length;
        int m = arr[0].length;
        boolean res = false;
        
        int i=0;
        int j=n-1;
        while(i<=j){
            int mid = (i+j)/2;
            if(key>=arr[mid][0] && key<=arr[mid][m-1]){
                if(Arrays.binarySearch(arr[mid],key)>=0){
                    res=true;
                }
                break;
            }else if(key<=arr[mid][0]){
                j=mid-1;
            }else{
                i=mid+1;
            }
        }
        return res;
    }

}

// Imagining 2D array into 1D array
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int l = 0;
        int r = rows * cols - 1;
        while (l <= r) {
            int mid = l + (r-l)/2;
            int temp = matrix[mid / cols][mid % cols]; // For converting 2D index to 1D index 
            if (temp == target) {
                return true;
            }
            else if (temp < target){
                l = mid + 1;
            } 
            else{
                r = mid - 1;
            } 
        }
        return false;
    }
}
