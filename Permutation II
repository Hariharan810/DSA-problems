class ThreeSumCloset {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Set<List<Integer>> uniquePermutations = new HashSet<>();
        recursivePermutation(0, nums, ans, uniquePermutations);
        return ans;
    }
    public static void recursivePermutation(int index,int[]nums,List<List<Integer>> ans,Set<List<Integer>> uniquePermutations){
        if(index==nums.length){
            List<Integer> innerArray=new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                innerArray.add(nums[i]);
            }
            if(uniquePermutations.add(innerArray)){
                ans.add(innerArray);
            }
            return;
        }
        for (int i = index ; i < nums.length; i++) {
            if(i>index && nums[i]==nums[i-1]){
                continue;
            }
            swap(i,index,nums);
            recursivePermutation(index+1,nums,ans,uniquePermutations);
            swap(i,index,nums);
        }
    }
     public static void swap(int i,int index,int[] nums){
          int temp=nums[i];
          nums[i]=nums[index];
          nums[index]=temp;
     }
}
