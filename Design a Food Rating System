class FoodRatings {
    Map<String, TreeSet<Food>> cuisineMap;
    Map<String, Food> foodMap;

    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
        foodMap = new HashMap<>();
        cuisineMap = new HashMap<>();

        for (int i = 0; i < foods.length; ++i) {
            Food food = new Food(foods[i], cuisines[i], ratings[i]);
            foodMap.put(food.name, food);
            
            cuisineMap.computeIfAbsent(food.cuisine, k -> new TreeSet<>(Comparator
                    .comparing(Food::getRating).reversed()
                    .thenComparing(Food::getName)));
            cuisineMap.get(food.cuisine).add(food);
        }
    }

    public void changeRating(String foodName, int newRating) {
        Food food = foodMap.get(foodName);
        if (food != null) {
            TreeSet<Food> foodSet = cuisineMap.get(food.cuisine);
            foodSet.remove(food);
            food.setRating(newRating);
            foodSet.add(food);
        }
    }

    public String highestRated(String cuisine) {
        TreeSet<Food> foodSet = cuisineMap.get(cuisine);
        return foodSet.first().getName();
    }
}

class Food {
    String name;
    String cuisine;
    int rating;

    public Food(String name, String cuisine, int rating) {
        this.name = name;
        this.rating = rating;
        this.cuisine = cuisine;
    }

    public String getName() {
        return name;
    }

    public int getRating() {
        return rating;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }
}
