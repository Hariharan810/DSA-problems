class ThreeSumCloset {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        recursivePermutation(0,nums,ans);
        return ans;
    }
    public static void recursivePermutation(int index,int[]nums,List<List<Integer>> ans){
        if(index==nums.length){
            List<Integer> innerArray=new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                innerArray.add(nums[i]);
            }
            ans.add(new ArrayList<>(innerArray));
            return;
        }
        for (int i = index ; i < nums.length; i++) {
            swap(i,index,nums);
            recursivePermutation(index+1,nums,ans);
            swap(i,index,nums);
        }
    }
    public static void swap(int i,int index,int[] nums){
          int temp=nums[i];
          nums[i]=nums[index];
          nums[index]=temp;
     }
}
